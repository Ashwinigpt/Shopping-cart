{"ast":null,"code":"// import React from \"react\";\n// import Cart from \"./Cart\";\n// import Products from \"./Products\";\n// import Filters from \"./Filters\";\n// import { products } from \"../data/data.json\";\n// class Shop extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             cartToggle: false,\n//             selectedSizes: [],\n//             cartItems: [],\n//         };\n//     }\n//     handleSizes = (size) => {\n//         if (this.state.selectedSizes.includes(size)) {\n//             this.setState(prevState => ({\n//                 selectedSizes: prevState.selectedSizes.filter(s => s !== size),\n//             }));\n//         } else {\n//             this.setState(prevState => ({\n//                 selectedSizes: prevState.selectedSizes.concat(size),\n//             }));\n//         }\n//     };\n//     handleCartToggle = (sumItems) => {\n//         if (!this.state.cartToggle) {\n//             return (\n//                 <>\n//                     <img src=\"./static/bag-icon.png\" />\n//                     <span className=\"flex justify-center align-center count\">{sumItems}</span>\n//                 </>\n//             );\n//         } else {\n//             return (\n//                 <>\n//                     <span>X</span>\n//                 </>\n//             );\n//         }\n//     };\n//     handleToggle = () => {\n//         this.setState({ cartToggle: !this.state.cartToggle });\n//     };\n//     handleAddCartItems = (prod) => {\n//         let isPresent = this.state.cartItems.findIndex(p => p.id === prod.id) !== -1;\n//         if (isPresent) {\n//             this.incrementQuantity(prod.id);\n//         } else {\n//             this.setState((prevState) => ({\n//                 cartItems: prevState.cartItems.concat({ ...prod, quantity: 1 }),\n//             }));\n//         }\n//     };\n//     incrementQuantity = (id) => {\n//         this.setState((prevState) => ({\n//             cartItems: prevState.cartItems.map(p => {\n//                 if (p.id === id) {\n//                     return { ...p, quantity: p.quantity + 1 };\n//                 }\n//                 return p;\n//             })\n//         }));\n//     }\n//     decrementQuantity = (id) => {\n//         this.setState((prevState) => ({\n//             cartItems: prevState.cartItems.map(p => {\n//                 if (p.id === id && p.quantity > 1) {\n//                     return { ...p, quantity: p.quantity - 1 };\n//                 }\n//                 return p;\n//             })\n//         }));\n//     }\n//     deleteItem = (id) => {\n//         this.setState((prevState) => {\n//             let updatedCartItems = prevState.cartItems.filter(p => {\n//                 return p.id !== id;\n//             });\n//             return {\n//                 cartItems: updatedCartItems,\n//             };\n//         });\n//     };\n//     render() {\n//         let sumItems = this.state.cartItems.reduce((acc, cv) => {\n//             acc = acc + cv.quantity;\n//             return acc;\n//         }, 0);\n//         return (\n//             <>\n//                 <div className=\"container flex justify-between align-start\">\n//                     <Filters products={products} selectedSizes={this.state.selectedSizes} handleSizes={(response) => { this.handleSizes(response) }} />\n//                     <Products products={products} selectedSizes={this.state.selectedSizes} handleAddCartItems={(response) => { this.handleAddCartItems(response) }} />\n//                     <aside>\n//                         <div\n//                             onClick={() => this.handleToggle()}\n//                             className={\n//                                 !this.state.cartToggle\n//                                     ? \"cart-toggle flex justify-center align-center cart-toggle-hide\"\n//                                     : \"cart-toggle flex justify-center align-center\"\n//                             }\n//                         >\n//                             {this.handleCartToggle(sumItems)}\n//                         </div>\n//                         <Cart sumItems={sumItems} cartToggle={this.state.cartToggle} cartItems={this.state.cartItems} incrementQuantity={(response) => this.incrementQuantity(response)} decrementQuantity={(response) => this.decrementQuantity(response)} deleteItem={(response) => this.deleteItem(response)} />\n//                     </aside>\n//                 </div>\n//             </>\n//         );\n//     }\n// }\n// export default Shop;","map":{"version":3,"names":[],"sources":["/home/ashwini/Documents/react.js-fundamental/block-BRaabw/TA-FRONTEND-state-and-forms-TRaaab/block-BRaabw/code/shopping-cart/src/components/Shop.js"],"sourcesContent":["// import React from \"react\";\n// import Cart from \"./Cart\";\n// import Products from \"./Products\";\n// import Filters from \"./Filters\";\n\n// import { products } from \"../data/data.json\";\n\n// class Shop extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             cartToggle: false,\n//             selectedSizes: [],\n//             cartItems: [],\n//         };\n//     }\n\n//     handleSizes = (size) => {\n//         if (this.state.selectedSizes.includes(size)) {\n//             this.setState(prevState => ({\n//                 selectedSizes: prevState.selectedSizes.filter(s => s !== size),\n//             }));\n//         } else {\n//             this.setState(prevState => ({\n//                 selectedSizes: prevState.selectedSizes.concat(size),\n//             }));\n//         }\n//     };\n\n//     handleCartToggle = (sumItems) => {\n//         if (!this.state.cartToggle) {\n//             return (\n//                 <>\n//                     <img src=\"./static/bag-icon.png\" />\n//                     <span className=\"flex justify-center align-center count\">{sumItems}</span>\n//                 </>\n//             );\n//         } else {\n//             return (\n//                 <>\n//                     <span>X</span>\n//                 </>\n//             );\n//         }\n//     };\n\n//     handleToggle = () => {\n//         this.setState({ cartToggle: !this.state.cartToggle });\n//     };\n\n//     handleAddCartItems = (prod) => {\n//         let isPresent = this.state.cartItems.findIndex(p => p.id === prod.id) !== -1;\n\n//         if (isPresent) {\n//             this.incrementQuantity(prod.id);\n//         } else {\n//             this.setState((prevState) => ({\n//                 cartItems: prevState.cartItems.concat({ ...prod, quantity: 1 }),\n//             }));\n//         }\n//     };\n\n//     incrementQuantity = (id) => {\n//         this.setState((prevState) => ({\n//             cartItems: prevState.cartItems.map(p => {\n//                 if (p.id === id) {\n//                     return { ...p, quantity: p.quantity + 1 };\n//                 }\n//                 return p;\n//             })\n//         }));\n//     }\n\n//     decrementQuantity = (id) => {\n//         this.setState((prevState) => ({\n//             cartItems: prevState.cartItems.map(p => {\n//                 if (p.id === id && p.quantity > 1) {\n//                     return { ...p, quantity: p.quantity - 1 };\n//                 }\n//                 return p;\n//             })\n//         }));\n//     }\n\n//     deleteItem = (id) => {\n//         this.setState((prevState) => {\n//             let updatedCartItems = prevState.cartItems.filter(p => {\n//                 return p.id !== id;\n//             });\n//             return {\n//                 cartItems: updatedCartItems,\n//             };\n//         });\n//     };\n\n//     render() {\n//         let sumItems = this.state.cartItems.reduce((acc, cv) => {\n//             acc = acc + cv.quantity;\n//             return acc;\n//         }, 0);\n\n\n//         return (\n//             <>\n//                 <div className=\"container flex justify-between align-start\">\n//                     <Filters products={products} selectedSizes={this.state.selectedSizes} handleSizes={(response) => { this.handleSizes(response) }} />\n//                     <Products products={products} selectedSizes={this.state.selectedSizes} handleAddCartItems={(response) => { this.handleAddCartItems(response) }} />\n//                     <aside>\n//                         <div\n//                             onClick={() => this.handleToggle()}\n//                             className={\n//                                 !this.state.cartToggle\n//                                     ? \"cart-toggle flex justify-center align-center cart-toggle-hide\"\n//                                     : \"cart-toggle flex justify-center align-center\"\n//                             }\n//                         >\n//                             {this.handleCartToggle(sumItems)}\n//                         </div>\n//                         <Cart sumItems={sumItems} cartToggle={this.state.cartToggle} cartItems={this.state.cartItems} incrementQuantity={(response) => this.incrementQuantity(response)} decrementQuantity={(response) => this.decrementQuantity(response)} deleteItem={(response) => this.deleteItem(response)} />\n//                     </aside>\n//                 </div>\n//             </>\n//         );\n//     }\n// }\n\n// export default Shop;"],"mappings},"metadata":{},"sourceType":"module"}